/* 2017.02.23 21:55
 * P_552
 * !!!
 * base class need virtual destuctor !!!
 * if class have defined destructor even if destructor is '=default', the
 * 'move' operator won't be generated by compiler !!!
 */
#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct Base {
	virtual ~Base() { cout << " destructor of Base ";}
};
struct Derived: public Base {
	virtual ~Derived() { cout << " destructor of derived ";}
};
struct Base1 {
	~Base1() { cout << " destructor of Base1 ";}
};
struct Derived1: public Base1 {
	~Derived1() { cout << " destructor of derived1 ";}
};

int main(int argc, char **argv)
{
	Base *p = new Derived();
	delete p;
	/* output:
	 *	destructor of derived
	 *	destructor of Base 
	 */

	Base1 *p1 = new Derived1();
	delete p1;
	/* output:
	 *	destructor of Base1 
	 */

	return 0;
}

